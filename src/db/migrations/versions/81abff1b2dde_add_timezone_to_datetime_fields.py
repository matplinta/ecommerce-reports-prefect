"""add timezone to datetime fields

Revision ID: 81abff1b2dde
Revises: ad870f4ef86b
Create Date: 2025-08-15 11:54:24.604211

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '81abff1b2dde'
down_revision: Union[str, None] = 'ad870f4ef86b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Offer.started_at
    op.alter_column(
        "offer", "started_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),            # -> timestamptz
        existing_nullable=True,
        postgresql_using="started_at AT TIME ZONE 'UTC'",
    )

    # Offer.ended_at
    op.alter_column(
        "offer", "ended_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=True,
        postgresql_using="ended_at AT TIME ZONE 'UTC'",
    )

    # Order.created_at
    op.alter_column(
        "order", "created_at",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        postgresql_using="created_at AT TIME ZONE 'UTC'",
    )

    # PriceHistory.date
    op.alter_column(
        "price_history", "date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        postgresql_using='"date" AT TIME ZONE \'UTC\'',
    )

    # StockHistory.date
    op.alter_column(
        "stock_history", "date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
        postgresql_using='"date" AT TIME ZONE \'UTC\'',
    )


def downgrade() -> None:
    # If you ever revert, keep the same UTC wall-clock by converting back with AT TIME ZONE 'UTC'
    op.alter_column(
        "stock_history", "date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        postgresql_using='"date" AT TIME ZONE \'UTC\'',
    )
    op.alter_column(
        "price_history", "date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        postgresql_using='"date" AT TIME ZONE \'UTC\'',
    )
    op.alter_column(
        "order", "created_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
        postgresql_using='created_at AT TIME ZONE \'UTC\'',
    )
    op.alter_column(
        "offer", "ended_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        postgresql_using='ended_at AT TIME ZONE \'UTC\'',
    )
    op.alter_column(
        "offer", "started_at",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=True,
        postgresql_using='started_at AT TIME ZONE \'UTC\'',
    )

# def upgrade() -> None:
#     """Upgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.alter_column('offer', 'started_at',
#                existing_type=postgresql.TIMESTAMP(),
#                type_=sa.DateTime(timezone=True),
#                existing_nullable=True)
#     op.alter_column('offer', 'ended_at',
#                existing_type=postgresql.TIMESTAMP(),
#                type_=sa.DateTime(timezone=True),
#                existing_nullable=True)
#     op.alter_column('order', 'created_at',
#                existing_type=postgresql.TIMESTAMP(),
#                type_=sa.DateTime(timezone=True),
#                existing_nullable=False)
#     op.alter_column('price_history', 'date',
#                existing_type=postgresql.TIMESTAMP(),
#                type_=sa.DateTime(timezone=True),
#                existing_nullable=False)
#     op.alter_column('stock_history', 'date',
#                existing_type=postgresql.TIMESTAMP(),
#                type_=sa.DateTime(timezone=True),
#                existing_nullable=False)
#     # ### end Alembic commands ###


# def downgrade() -> None:
#     """Downgrade schema."""
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.alter_column('stock_history', 'date',
#                existing_type=sa.DateTime(timezone=True),
#                type_=postgresql.TIMESTAMP(),
#                existing_nullable=False)
#     op.alter_column('price_history', 'date',
#                existing_type=sa.DateTime(timezone=True),
#                type_=postgresql.TIMESTAMP(),
#                existing_nullable=False)
#     op.alter_column('order', 'created_at',
#                existing_type=sa.DateTime(timezone=True),
#                type_=postgresql.TIMESTAMP(),
#                existing_nullable=False)
#     op.alter_column('offer', 'ended_at',
#                existing_type=sa.DateTime(timezone=True),
#                type_=postgresql.TIMESTAMP(),
#                existing_nullable=True)
#     op.alter_column('offer', 'started_at',
#                existing_type=sa.DateTime(timezone=True),
#                type_=postgresql.TIMESTAMP(),
#                existing_nullable=True)
#     # ### end Alembic commands ###
